// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @unique @default(autoincrement())
  refreshTokens RefreshToken[] //relacion de user con refreshTokens
  userId        String         @unique
  email         String         @unique
  username      String         @db.VarChar(40) //cambiado de name a username 
  password      String         @db.VarChar(20)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  posts         Post[]
}

model RefreshToken {
  id          String   @id @unique
  userId      Int
  hashedToken String
  expires     DateTime
  User        User?    @relation(fields: [userId], references: [id]) //relacion de refreshToken con user
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id Int @id @default(autoincrement())

  title     String   @db.VarChar(40)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id]) //relacion de post con user
  authorId  Int      @unique
  recipes   Recipes? @relation(fields: [recipesId], references: [id]) //relacion de post con recipes
  recipesId Int      @unique
}

model Recipes {
  id           Int      @id @default(autoincrement())
  postId       Int      @unique
  title        String   @db.VarChar(40)
  description  String   @db.VarChar(255)
  servings     Int      @default(1)
  ingredients  String[] @db.VarChar(50)
  instructions String[] @db.VarChar(255)
  image        String?  @db.VarChar(255) //imagen subida por cloudinary por lo que es un string (link)
  posts        Post[] // relation of recipes with post
}
